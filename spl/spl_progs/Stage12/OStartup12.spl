//Init Code 
loadi(65,7);
loadi(66,8);
//Idle Code
loadi(69,11);
loadi(70,12);
//INT 10
loadi(22,35);
loadi(23,36);
//Exhandler
loadi(2, 15);
loadi(3, 16);
//Library
loadi(63,13);
loadi(64,14);
//Timer
loadi(4, 17);
loadi(5, 18);
//INT 7
loadi(16,29);
loadi(17,30);


//FOR IDLE CODE
PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;

//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


//PROCESS TABLE

//PID
[PROCESS_TABLE + 1] = 0;	
//STATE
[PROCESS_TABLE + 4] = CREATED;
//UAPAGENO
[PROCESS_TABLE + 11] = 82;
//KPTR
[PROCESS_TABLE + 12] = 0; 
//UPTR
[PROCESS_TABLE + 13] = 8*512; 

[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = PTLR;

//First entry of Idle Stack
[81 * 512] = [69 * 512 + 1];


//FOR INIT CODE
PTBR = PAGE_TABLE_BASE+20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//PROCESS TABLE
//PID
[PROCESS_TABLE + 17] = 1;
//STATE
[PROCESS_TABLE + 20] = RUNNING;
//UAPage No
[PROCESS_TABLE + 27] = 80;
//KPTR
[PROCESS_TABLE + 28] = 0; 
//UPTR of INIT storing logical start of Stack 
[PROCESS_TABLE + 29] = 8*512; 
[PROCESS_TABLE + 30] = PTBR;
[PROCESS_TABLE + 31] = PTLR;



//Currently executing process
[SYSTEM_STATUS_TABLE + 1] = 1;


//First entry of Init Stack 
[76 * 512] = [65 * 512 + 1];

//Stack Ptr set to supposed logical address of Stack 
SP = 8*512;
ireturn;



