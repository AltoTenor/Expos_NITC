//Storing SP in UPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

//Setting Stack Pointer to UArea Page number * (512 - 1)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

//INFO of OLD PROCESS STORED IN PROCESS TABLE
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

//KPTR
[process_table_entry + 12] = SP % 512;

//Check PCB in expos DOC for more info
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

//STATE
[process_table_entry + 4] = READY;

//ACUTAL SWITCHING HAPPENING
alias newPID R2;
if(currentPID == 0) then
    newPID = 1;
else
    newPID = 0;
endif;



// INFO TAKEN FROM PROCESS TABLE of NEW PROCESS 
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;


//FIRST TIME SET UP IF PROCESS JUST CREATED

//HAD error here since i did not set up PTBR and PTLR correctly my SP basically had to access memory from a region of length 0 starting 0 which is illegal mem access.


if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    ireturn;
endif;



//IF NOT FIRST TIME

[new_process_table + 4] = RUNNING;

restore;

SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;
