//Init Code 
loadi(65,7);
loadi(66,8);
//INT 10
loadi(22,35);
loadi(23,36);
//Exhandler
loadi(2, 15);
loadi(3, 16);
//Library
loadi(63,13);
loadi(64,14);
//Timer
loadi(4, 17);
loadi(5, 18);
//INT 7
loadi(16,29);
loadi(17,30);
//Exec Code
loadi(83,69);
//Scheduler Module
loadi(50,63);
loadi(51,64);

//FOR INIT CODE
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//PROCESS TABLE
//PID
[PROCESS_TABLE + 16*1 + 1] = 1;
//STATE
[PROCESS_TABLE + 16*1 + 4] = CREATED;
//UAPage No
[PROCESS_TABLE + 16*1 + 11] = 80;
//KPTR
[PROCESS_TABLE + 16*1 + 12] = 0; 
//UPTR of INIT storing logical start of Stack 
[PROCESS_TABLE + 16*1 + 13] = 8*512; 
[PROCESS_TABLE + 16*1 + 14] = PTBR;
[PROCESS_TABLE + 16*1 + 15] = PTLR;



//First entry of Init Stack 
[76 * 512] = [65 * 512 + 1];





// For Exec CODE (EVEN NO.S)
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


//Heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = 85;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 86;
[PTBR+17] = "0110";
[PTBR+18] = 87;
[PTBR+19] = "0110";

//PROCESS TABLE
//PID
[PROCESS_TABLE + 16*2 + 1] = 2;
//STATE
[PROCESS_TABLE + 16*2 + 4] = CREATED;
//UAPage No
[PROCESS_TABLE + 16*2 + 11] = 88;
//KPTR
[PROCESS_TABLE + 16*2 + 12] = 0; 
//UPTR of EXEC storing logical start of Stack 
[PROCESS_TABLE + 16*2 + 13] = 8*512; 
[PROCESS_TABLE + 16*2 + 14] = PTBR;
[PROCESS_TABLE + 16*2 + 15] = PTLR;


//First entry of Exen Stack 
[86 * 512] = [83 * 512 + 1];


//Setting rest to TERMINATED
[PROCESS_TABLE + 16*3 + 4] = TERMINATED;
[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;




return;