//RESOURCE_MANAGER MODULE

alias functionNum R1;



//ACQUIRE DISK
if ( functionNum == 3 )then
    alias currentPID R2;

    //Waiting for Disk to be released
    while( [DISK_STATUS_TABLE + 0] == 1 )do
        [PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_DISK;
        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;

    //Setting new process to Disk
    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;


endif;



//ACQUIRING TERMINAL
if ( functionNum == 8 )then
    alias currentPID R2;

    //Waiting for Terminal to be released
    while( [ TERMINAL_STATUS_TABLE + 0 ] == 1 )do
        [PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_TERMINAL;
        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;
    //Assigning new process to Terminal 
    [ TERMINAL_STATUS_TABLE + 0 ] = 1;
    [ TERMINAL_STATUS_TABLE + 1 ] = currentPID;
endif;




//RELEASE TERMINAL
if ( functionNum == 9 )then
    alias currentPID R2;
    alias index R4;

    // This process isnt using terminal resource
    if ( [ TERMINAL_STATUS_TABLE + 1 ] != currentPID) then
        R0 = -1;
    else
        // Set Terminal as released
        [ TERMINAL_STATUS_TABLE + 0 ] = 0;
        index=0;
        //Loop through and make every process ready
        while( index != 16 )do
            if ( [PROCESS_TABLE + ( index * 16) + 4] == WAIT_TERMINAL )then
                [PROCESS_TABLE + ( index * 16) + 4] = READY;
            endif;
            index = index + 1;
        endwhile;
        R0 = 0;

    endif; 

endif;


return;